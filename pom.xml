<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.opendap.d1</groupId>
  <artifactId>DatasetsDatabase</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>DatasetsDatabase</name>
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <build>
    <defaultGoal>install</defaultGoal>
    
    <plugins>
      
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>2.3.2</version>
        <configuration>
          <source>1.6</source>
          <target>1.6</target>
        </configuration>
      </plugin>
      
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>2.3</version>
        
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            
            <configuration>
              <!-- This is/was providing a 9% benefit but takes an extra 13s -->
              <!-- minimizeJar>true</minimizeJar -->
              
              <!-- This is the magic that makes the jar executable -->
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <manifestEntries>
                    <Main-Class>org.opendap.d1.DatasetsDatabase.EditDatasets</Main-Class>
                    <!-- Build-Number>123</Build-Number -->
                    <!-- Class-Path>DatasetsDatabase-1.0-SNAPSHOT.jar</Class-Path -->
                  </manifestEntries>
                </transformer>
              </transformers>
              
              <!-- Without this 'exclude' running the Uber Jar results in the error:
                  java.lang.SecurityException: Invalid signature file digest for Manifest main attributes. -->
              <filters>
                <filter>
                  <artifact>*:*</artifact>
                  <excludes>
                    <exclude>META-INF/*.SF</exclude>
                    <exclude>META-INF/*.DSA</exclude>
                    <exclude>META-INF/*.RSA</exclude>
                  </excludes>
                </filter>
              </filters>
              
            </configuration>
            
          </execution>
        </executions>
        
      </plugin>
      
    </plugins>
  </build>

  <repositories>
    <!-- Added this because the DataONE libs are not yet in Maven central -->
    <repository>
      <releases><enabled>true</enabled></releases>
      <snapshots><enabled>true</enabled></snapshots>
      <id>dataone.org</id>
      <url>http://dev-testing.dataone.org/maven</url>
    </repository>
    
  </repositories>
  
  <dependencies>
    
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    
    <!-- https://bitbucket.org/xerial/sqlite-jdbc 
        Note that when we move this code into Tomcat, the sqlite jar
        will need to be loaded into '(TOMCAT_HOME)/lib' by hand given the
        specification of JNI. See https://bitbucket.org/xerial/sqlite-jdbc
        #markdown-header-using-sqlitejdbc-with-maven2 
    
        This is apparently not true - the servlet works and uses SQLite
        without doing this. -->
    <dependency>
      <groupId>org.xerial</groupId>
      <artifactId>sqlite-jdbc</artifactId>
      <version>3.7.2</version>
    </dependency>
    
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>1.0.13</version>
    </dependency>
    
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>1.7.5</version>
    </dependency>
    
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-simple</artifactId>
      <version>1.6.4</version>
    </dependency>
    
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <version>1.7.5</version>
    </dependency>

    <!--dependency -->
      <!-- This dep is taken care of by the dataone dep that follows, but I was
        testing a simple version of the servlet that had only log4j in WEB0INF/lib
        and I've decided this might come in handy in the future. jhrg 5/6/14 -->
      <!--groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <version>1.2.17</version>
    </dependency-->
    
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>servlet-api</artifactId>
      <version>2.5</version>
      <!-- Changed 'compile' to 'provided' so that the resulting war file
           did not include the servlet-api-2.5.jar which made tomcat fail
           when it loaded the servlet. -->
      <scope>provided</scope>
    </dependency>
    
    <!--dependency>            
      <artifactId>d1_portal</artifactId>
      <groupId>org.dataone</groupId>
      <version>1.3.0-SNAPSHOT</version>
      <type>jar</type>
    </dependency-->
    
    <!-- replace the above with these two deps since the 'portal' code has lots of
      stuff the D1 folks tell me is not needed for a MN. (d1_libclient_java and 
      d1_common_java) -->
    <dependency>            
      <artifactId>d1_libclient_java</artifactId>
      <groupId>org.dataone</groupId>
      <version>1.3.0-SNAPSHOT</version>
      <type>jar</type>
    </dependency>
    
    <dependency>            
      <artifactId>d1_common_java</artifactId>
      <groupId>org.dataone</groupId>
      <version>1.3.0-SNAPSHOT</version>
      <type>jar</type>
    </dependency>
    
  </dependencies>
  
</project>
